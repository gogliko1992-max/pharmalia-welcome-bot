import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE")  # https://...run.app
PORT = int(os.getenv("PORT", "8080"))

if not TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")
if not WEBHOOK_BASE:
    logger.warning("WEBHOOK_BASE is not set. Webhook will fail to register until set correctly.")

# –í–ê–ñ–ù–û: –ø—É—Ç—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º, —á—Ç–æ —É–∂–µ —Å—Ç–æ–∏—Ç –≤ getWebhookInfo
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_BASE}{WEBHOOK_PATH}" if WEBHOOK_BASE else None

bot = Bot(token=TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def on_start_cmd(message: types.Message):
    kb = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/Pharmalia")
    )
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PHARMALIA!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.", reply_markup=kb)

@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def greet_new_member(message: types.Message):
    for member in message.new_chat_members:
        kb = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/Pharmalia")
        )
        text = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.first_name}!\n\n"
            "üåø *Pharmalia Clinic Batumi* ‚Äî –∑–∞–±–æ—Ç–∞ –æ –≤–∞—à–µ–º –∑–¥–æ—Ä–æ–≤—å–µ.\n"
            "üíâ **–£–ó–ò**, **–ê–Ω–∞–ª–∏–∑—ã**, **–ì–∏–Ω–µ–∫–æ–ª–æ–≥–∏—è**, **–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è**\n"
            "üßí **–ü–µ–¥–∏–∞—Ç—Ä–∏—è**, **–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∏—è**, **–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥–∏—è**\n"
            "‚ôø **–†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è**, **–§–æ—Ä–º–∞ 100**, **–ö–∞–ø–µ–ª—å–Ω–∏—Ü—ã**, **–£—Ä–æ–ª–æ–≥–∏—è**\n\n"
            "üìç –ë–∞—Ç—É–º, –í–∞—Ö—Ç–∞–Ω–≥ –ì–æ—Ä–≥–∞—Å–∞–ª–∏ 4\n"
            "üìû +995 593 50 93 57\n\n"
            "üìÖ –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É üëá"
        )
        await message.reply(text, reply_markup=kb)

async def on_startup(dp):
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"Webhook set to {WEBHOOK_URL}")
    else:
        logger.error("WEBHOOK_BASE is empty; cannot set webhook.")

async def on_shutdown(dp):
    await bot.delete_webhook()

if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host="0.0.0.0",
        port=PORT,
    )
